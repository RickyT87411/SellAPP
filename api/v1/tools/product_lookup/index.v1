<?php
require $_SERVER['DOCUMENT_ROOT'].'/include.php';
require 'dbconfig.php';
require 'validate-get.php';
require 'validate-post.php';
require 'validate-delete.php';
require 'mapping.php';

define("_GET_PRODUCT_PROC_PROD_", "product_query");
define("_GET_PRODUCT_PROC_DEV_", "product_query");

define("_POST_PRODUCT_PROC_PROD_", "product_upsert");
define("_POST_PRODUCT_PROC_DEV_", "product_upsert");

define("_DELETE_PRODUCT_PROC_PROD_", "product_delete");
define("_DELETE_PRODUCT_PROC_DEV_", "product_delete");

if (PHP_SAPI == 'cli-server') {
    // To help the built-in PHP dev server, check if the request was actually for
    // something which should probably be served as a static file
    $url  = parse_url($_SERVER['REQUEST_URI']);
    $file = __DIR__ . $url['path'];
    if (is_file($file)) {
        return false;
    }
}

/**
 * Import Dependencies and Instantiate
 */

require $_SERVER['DOCUMENT_ROOT']. '/api-vendor/autoload.php';

session_start();

// Instantiate the app
$settings = require __DIR__ . '/src/settings.php';
$app = new \Slim\App($settings);

// Set up dependencies
require __DIR__ . '/src/dependencies.php';

// Register middleware
require __DIR__ . '/src/middleware.php';


require __DIR__ . '/src/APIRateLimit.php';

/**
 * Configure Middleware
 */
//$app->add(new \Slim\Extras\Middleware\HttpBasicAuth('dev-integrator', 'Zj|~YxiCqh!2'));

class JsonEncodedException extends \Exception
{
    /**
     * Json encodes the message and calls the parent constructor.
     *
     * @param null           $message
     * @param int            $code
     * @param Exception|null $previous
     */
    public function __construct($message = null, $code = 0, Exception $previous = null)
    {
        parent::__construct(json_encode($message), $code, $previous);
    }

    /**
     * Returns the json decoded message.
     *
     * @return mixed
     */
    public function getDecodedMessage()
    {
        return json_decode($this->getMessage());
    }
}

$app->add(function ($request, $response, $next) {

	$host 	= _HOST_URI_PROD_;
	$dbname = _HOST_DB_PROD_;
	$usr 	= _HOST_USER_PROD_;
	$pwd 	= _HOST_PASSWORD_PROD_;

    $requests = 100; // maximum number of requests
    $inmins = 60;    // in how many time (minutes)

    $APIRateLimit = new App\Utils\APIRateLimit($requests, $inmins,"mysql:host=$host;dbname=$dbname", $usr, $pwd);
    $mustbethrottled = $APIRateLimit();

    if ($mustbethrottled == false) {
        $responsen = $next($request, $response);
    } else {
        $responsen = $response->withStatus(429)
        				->withHeader('RateLimit-Limit', $requests);
    }

    return $responsen;
});

/**
 * Routes
 */
// GET route
$app->get(
    '/',
    function ($request, $response, $args) use ($app) {
   		// Import field mapping
    	global $_GET_FIELD_MAPPING_;
    	
    	try {
    		$body = array(
    			 $_GET_FIELD_MAPPING_["_sku"] 	=> $request->getParam($_GET_FIELD_MAPPING_["_sku"])
    			,$_GET_FIELD_MAPPING_["_barcode"] => $request->getParam($_GET_FIELD_MAPPING_["_barcode"])
    			,$_GET_FIELD_MAPPING_["_id"] => $request->getParam($_GET_FIELD_MAPPING_["_id"])
    		);
    		
    		$body = json_encode($body);
    	
			// Validate input
			$errs = validate_get($body);
			$valid = empty($errs);
		
			// Return an array list of errors if invalid
			if(!$valid) {
				return 	$response->withStatus(400)
							->withHeader("Content-Type","application/json")
							->write(json_encode($errs));
			}
		
			// Convert JSON data to array
			$data = json_decode($body, true);
			
			// Set params
			$devmode = $request->getParam("devmode") === true || strcmp($request->getParam("devmode"), "true") == 0 ? true : false;
			
			// DB Settings
			$host 	= !$devmode ? _HOST_URI_PROD_ 		: _HOST_URI_DEV_;
			$dbname = !$devmode ? _HOST_DB_PROD_ 		: _HOST_DB_DEV_;
			$usr 	= !$devmode ? _HOST_USER_PROD_ 		: _HOST_USER_DEV_;
			$pwd 	= !$devmode ? _HOST_PASSWORD_PROD_ 	: _HOST_PASSWORD_DEV_;

			$proc 	= !$devmode ? _GET_PRODUCT_PROC_PROD_ : _GET_PRODUCT_PROC_DEV_;
	
			$conn = new PDO("mysql:host=$host;dbname=$dbname", $usr, $pwd);
			$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
			
			$results = array();
			
			$stmt = $conn->prepare(
				"CALL $proc(".
					 ":_sku".
					",:_barcode".
					",:_id".
				");"
			);
			$stmt->bindParam(':_sku', 		$data[$_GET_FIELD_MAPPING_["_sku"]], PDO::PARAM_STR,256); 
			$stmt->bindParam(':_barcode', 	$data[$_GET_FIELD_MAPPING_["_barcode"]], PDO::PARAM_STR,256); 
			$stmt->bindParam(':_id', 		$data[$_GET_FIELD_MAPPING_["_id"]], PDO::PARAM_STR,36); 
			$stmt->execute();
			
			// Parse record set
			while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
				$row["tags"] = $row["tags"] != null ? explode(",", $row["tags"]) : array();
				$row["barcodes"] = $row["barcodes"] != null ? explode(",", $row["barcodes"]) : array();
				array_push($results, $row);
			}
			
			$stmt->closeCursor();

			// Return input body as results to confirm success
			return 	$response->withStatus(200)
						->withHeader("Content-Type","application/json")
						->write(json_encode($results));
		
		} catch (PDOException $e) {
			return 	$response->withStatus(500)
							->withHeader("Content-Type","application/json")
							->write(json_encode(array(
						"ErrorCode"	=>	500,
						"Exception"	=>	$e->getMessage()
					)));
		}
    }
);

// POST route
$app->post(
    '/',
    function ($request, $response, $args) use ($app) {
    	// Import field mapping
    	global $_POST_FIELD_MAPPING_;
    	
    	try {
			// Validate input
			$errs = validate_post($request->getBody());
			$valid = empty($errs);
		
			// Return an array list of errors if invalid
			if(!$valid) {
				return 	$response->withStatus(400)
							->withHeader("Content-Type","application/json")
							->write(json_encode($errs));
			}
		
			// Convert JSON data to array
			$array = json_decode($request->getBody(), true);
			
			// Set params
			$devmode = $request->getParam("devmode") === true || strcmp($request->getParam("devmode"), "true") == 0 ? true : false;
			
			// DB Settings
			$host 	= !$devmode ? _HOST_URI_PROD_ 		: _HOST_URI_DEV_;
			$dbname = !$devmode ? _HOST_DB_PROD_ 		: _HOST_DB_DEV_;
			$usr 	= !$devmode ? _HOST_USER_PROD_ 		: _HOST_USER_DEV_;
			$pwd 	= !$devmode ? _HOST_PASSWORD_PROD_ 	: _HOST_PASSWORD_DEV_;

			$proc 	= !$devmode ? _POST_PRODUCT_PROC_PROD_ : _POST_PRODUCT_PROC_DEV_;
	
			$conn = new PDO("mysql:host=$host;dbname=$dbname", $usr, $pwd);
			$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
			
			$results = array();
			
			foreach($array as $data) {
				$sort_index = $data[$_POST_FIELD_MAPPING_["_sorting_index"]];

				// If no @SORTING_INDEX has been set then auto-apply based on API result
				if( $sort_index == null || strcmp($sort_index,"") == 0 ) {
					$department = $data[$_POST_FIELD_MAPPING_["_department"]];
					$variant = null;
					$lookup = null;
				
					if( strcmp(strtolower($data[$_POST_FIELD_MAPPING_["_variant_1_name"]]), "size") == 0 ) {
						$variant = $data[$_POST_FIELD_MAPPING_["_variant_1_name"]];
						$lookup = $data[$_POST_FIELD_MAPPING_["_variant_1_value"]];
					} else if( strcmp(strtolower($data[$_POST_FIELD_MAPPING_["_variant_2_name"]]), "size") == 0 ) {
						$variant = $data[$_POST_FIELD_MAPPING_["_variant_2_name"]];
						$lookup = $data[$_POST_FIELD_MAPPING_["_variant_2_value"]];
					} else if( strcmp(strtolower($data[$_POST_FIELD_MAPPING_["_variant_3_name"]]), "size") == 0 ) {
						$variant = $data[$_POST_FIELD_MAPPING_["_variant_3_name"]];
						$lookup = $data[$_POST_FIELD_MAPPING_["_variant_3_value"]];
					} else if( strcmp(strtolower($data[$_POST_FIELD_MAPPING_["_variant_4_name"]]), "size") == 0 ) {
						$variant = $data[$_POST_FIELD_MAPPING_["_variant_4_name"]];
						$lookup = $data[$_POST_FIELD_MAPPING_["_variant_4_value"]];
					} else if( strcmp(strtolower($data[$_POST_FIELD_MAPPING_["_variant_5_name"]]), "size") == 0 ) {
						$variant = $data[$_POST_FIELD_MAPPING_["_variant_5_name"]];
						$lookup = $data[$_POST_FIELD_MAPPING_["_variant_5_value"]];
					}
					
					$url = _API_GET_SORT_INDEX_URL_ . "?" . 
						 "department=".urlencode($department) . 
						"&variant_name=".urlencode($variant) .
						"&variant_value=".urlencode($lookup)
					;
					
					// Get @SORT_INDEX from API
					$query = _GET($url, null, true, false, $errs, $info);
					
					// Throw error if found
					if(!empty($errs)) {
						throw new JsonEncodedException($errs);
					}
					
					// Exract response
					$query = json_decode($query,true);
					// Select returned @SORT_INDEX if available
					$sort_index = $query && is_array($query) && array_key_exists("sort_index", $query) ? $query["sort_index"] : "0";
				}
			
				// Execute the stored procedure
				$stmt = $conn->prepare(
					"CALL $proc(".
						 ":_sku".
						",:_barcode".
						",:_hierarchy_id".
						",:_hierarchy_code".
						",:_hierarchy_title".
						",:_name".
						",:_brand".
						",:_category".
						",:_type".
						",:_costing_method".
						",:_uom".
						",:_retail_price".
						",:_last_cost_price".
						",:_fixed_cost_price".
						",:_average_cost_price".
						",:_wholesale_price".
						",:_last_supplied_by".
						",:_category_tier_1".
						",:_category_tier_2".
						",:_category_tier_3".
						",:_category_tier_4".
						",:_category_tier_5".
						",:_category_tier_6".
						",:_category_tier_7".
						",:_category_tier_8".
						",:_category_tier_9".
						",:_category_tier_10".
						",:_year".
						",:_season".
						",:_business_stream".
						",:_department".
						",:_variant_1_name".
						",:_variant_1_value".
						",:_variant_2_name".
						",:_variant_2_value".
						",:_variant_3_name".
						",:_variant_3_value".
						",:_variant_4_name".
						",:_variant_4_value".
						",:_variant_5_name".
						",:_variant_5_value".
						",:_stock_locator".
						",:_length".
						",:_width".
						",:_height".
						",:_weight".
						",:_hs_code".
						",:_financial_grouping_code".
						",:_financial_expense_account".
						",:_financial_revenue_account".
						",:_financial_inventory_account".
						",:_financial_cogs_account".
						",:_financial_liability_account".
						",:_financial_purchase_tax_account".
						",:_financial_sale_tax_account".
						",:_taxable".
						",:_licensed".
						",:_charitable".
						",:_free".
						",:_consignment".
						",:_sorting_index".
						",:_description".
						",:_tags".
						",:_status".
					");"
				);
				$stmt->bindParam(':_sku', 							$data[$_POST_FIELD_MAPPING_["_sku"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_barcode', 						$data[$_POST_FIELD_MAPPING_["_barcode"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_hierarchy_id', 					$data[$_POST_FIELD_MAPPING_["_hierarchy_id"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_hierarchy_code', 				$data[$_POST_FIELD_MAPPING_["_hierarchy_code"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_hierarchy_title', 				$data[$_POST_FIELD_MAPPING_["_hierarchy_title"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_name', 							$data[$_POST_FIELD_MAPPING_["_name"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_brand', 						$data[$_POST_FIELD_MAPPING_["_brand"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_category', 						$data[$_POST_FIELD_MAPPING_["_category"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_type', 							$data[$_POST_FIELD_MAPPING_["_type"]]);
				$stmt->bindParam(':_costing_method', 				$data[$_POST_FIELD_MAPPING_["_costing_method"]]);
				$stmt->bindParam(':_uom', 							$data[$_POST_FIELD_MAPPING_["_uom"]], PDO::PARAM_STR,50);
				$stmt->bindParam(':_retail_price', 					$data[$_POST_FIELD_MAPPING_["_retail_price"]]);
				$stmt->bindParam(':_last_cost_price', 				$data[$_POST_FIELD_MAPPING_["_last_cost_price"]]);
				$stmt->bindParam(':_fixed_cost_price', 				$data[$_POST_FIELD_MAPPING_["_fixed_cost_price"]]);
				$stmt->bindParam(':_average_cost_price', 			$data[$_POST_FIELD_MAPPING_["_average_cost_price"]]);
				$stmt->bindParam(':_wholesale_price', 				$data[$_POST_FIELD_MAPPING_["_wholesale_price"]]);
				$stmt->bindParam(':_last_supplied_by', 				$data[$_POST_FIELD_MAPPING_["_last_supplied_by"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_category_tier_1', 				$data[$_POST_FIELD_MAPPING_["_category_tier_1"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_category_tier_2', 				$data[$_POST_FIELD_MAPPING_["_category_tier_2"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_category_tier_3', 				$data[$_POST_FIELD_MAPPING_["_category_tier_3"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_category_tier_4', 				$data[$_POST_FIELD_MAPPING_["_category_tier_4"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_category_tier_5', 				$data[$_POST_FIELD_MAPPING_["_category_tier_5"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_category_tier_6', 				$data[$_POST_FIELD_MAPPING_["_category_tier_6"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_category_tier_7', 				$data[$_POST_FIELD_MAPPING_["_category_tier_7"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_category_tier_8', 				$data[$_POST_FIELD_MAPPING_["_category_tier_8"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_category_tier_9', 				$data[$_POST_FIELD_MAPPING_["_category_tier_9"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_category_tier_10', 				$data[$_POST_FIELD_MAPPING_["_category_tier_10"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_year', 							$data[$_POST_FIELD_MAPPING_["_year"]]);
				$stmt->bindParam(':_season', 						$data[$_POST_FIELD_MAPPING_["_season"]], PDO::PARAM_STR,50);
				$stmt->bindParam(':_business_stream', 				$data[$_POST_FIELD_MAPPING_["_business_stream"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_department', 					$data[$_POST_FIELD_MAPPING_["_department"]], PDO::PARAM_STR,50);
				$stmt->bindParam(':_variant_1_name', 				$data[$_POST_FIELD_MAPPING_["_variant_1_name"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_variant_1_value', 				$data[$_POST_FIELD_MAPPING_["_variant_1_value"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_variant_2_name', 				$data[$_POST_FIELD_MAPPING_["_variant_2_name"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_variant_2_value', 				$data[$_POST_FIELD_MAPPING_["_variant_2_value"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_variant_3_name', 				$data[$_POST_FIELD_MAPPING_["_variant_3_name"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_variant_3_value', 				$data[$_POST_FIELD_MAPPING_["_variant_3_value"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_variant_4_name', 				$data[$_POST_FIELD_MAPPING_["_variant_4_name"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_variant_4_value', 				$data[$_POST_FIELD_MAPPING_["_variant_4_value"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_variant_5_name', 				$data[$_POST_FIELD_MAPPING_["_variant_5_name"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_variant_5_value', 				$data[$_POST_FIELD_MAPPING_["_variant_5_value"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_stock_locator', 				$data[$_POST_FIELD_MAPPING_["_stock_locator"]], PDO::PARAM_STR,50);
				$stmt->bindParam(':_length', 						$data[$_POST_FIELD_MAPPING_["_length"]]);
				$stmt->bindParam(':_width', 						$data[$_POST_FIELD_MAPPING_["_width"]]);
				$stmt->bindParam(':_height', 						$data[$_POST_FIELD_MAPPING_["_height"]]);
				$stmt->bindParam(':_weight', 						$data[$_POST_FIELD_MAPPING_["_weight"]]);
				$stmt->bindParam(':_hs_code', 						$data[$_POST_FIELD_MAPPING_["_hs_code"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_financial_grouping_code', 		$data[$_POST_FIELD_MAPPING_["_financial_grouping_code"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_financial_expense_account', 	$data[$_POST_FIELD_MAPPING_["_financial_expense_account"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_financial_revenue_account', 	$data[$_POST_FIELD_MAPPING_["_financial_revenue_account"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_financial_inventory_account', 	$data[$_POST_FIELD_MAPPING_["_financial_inventory_account"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_financial_cogs_account', 		$data[$_POST_FIELD_MAPPING_["_financial_cogs_account"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_financial_liability_account', 	$data[$_POST_FIELD_MAPPING_["_financial_liability_account"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_financial_purchase_tax_account',$data[$_POST_FIELD_MAPPING_["_financial_purchase_tax_account"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_financial_sale_tax_account',	$data[$_POST_FIELD_MAPPING_["_financial_sale_tax_account"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_taxable', 						$data[$_POST_FIELD_MAPPING_["_taxable"]], PDO::PARAM_BOOL);
				$stmt->bindParam(':_licensed', 						$data[$_POST_FIELD_MAPPING_["_licensed"]], PDO::PARAM_BOOL);
				$stmt->bindParam(':_charitable', 					$data[$_POST_FIELD_MAPPING_["_charitable"]], PDO::PARAM_BOOL);
				$stmt->bindParam(':_free', 							$data[$_POST_FIELD_MAPPING_["_free"]], PDO::PARAM_BOOL);
				$stmt->bindParam(':_consignment', 					$data[$_POST_FIELD_MAPPING_["_consignment"]], PDO::PARAM_BOOL);
				$stmt->bindParam(':_sorting_index', 				$sort_index);
				$stmt->bindParam(':_description', 					$data[$_POST_FIELD_MAPPING_["_description"]], PDO::PARAM_STR,256);
				$stmt->bindParam(':_tags', 							$data[$_POST_FIELD_MAPPING_["_tags"]]);
				$stmt->bindParam(':_status', 						$data[$_POST_FIELD_MAPPING_["_status"]]);
				$stmt->execute();
				
				// Parse record set
				while ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {
					$row["tags"] = $row["tags"] != null ? explode(",", $row["tags"]) : array();
					$row["barcodes"] = $row["barcodes"] != null ? explode(",", $row["barcodes"]) : array();
					array_push($results, $row);
				}
				
				$stmt->closeCursor();
			}

			// Return input body as results to confirm success
			return 	$response->withStatus(200)
						->withHeader("Content-Type","application/json")
						->write(json_encode($results));
		
		} catch (JsonEncodedException $e) {
						return $response->withStatus(400)
								->withHeader("Content-Type","application/json")
								->write($e->getMessage());
		} catch (PDOException $e) {
			return 	$response->withStatus(500)
							->withHeader("Content-Type","application/json")
							->write(json_encode(array(
						"ErrorCode"	=>	500,
						"Exception"	=>	$e->getMessage()
					)));
		}
        
    }
);

// PUT route
$app->put(
    '/',
    function () {
    }
);

// DELETE route
$app->delete(
    '/',
    function ($request, $response, $args) use ($app) {
    	// Import field mapping
    	global $_DELETE_FIELD_MAPPING_;
    	
    	try {
			// Validate input
			$errs = validate_delete($request->getBody());
			$valid = empty($errs);
		
			// Return an array list of errors if invalid
			if(!$valid) {
				return 	$response->withStatus(400)
							->withHeader("Content-Type","application/json")
							->write(json_encode($errs));
			}
		
			// Convert JSON data to array
			$array = json_decode($request->getBody(), true);
			
			// Set params
			$devmode = $request->getParam("devmode") === true || strcmp($request->getParam("devmode"), "true") == 0 ? true : false;
			
			// DB Settings
			$host 	= !$devmode ? _HOST_URI_PROD_ 		: _HOST_URI_DEV_;
			$dbname = !$devmode ? _HOST_DB_PROD_ 		: _HOST_DB_DEV_;
			$usr 	= !$devmode ? _HOST_USER_PROD_ 		: _HOST_USER_DEV_;
			$pwd 	= !$devmode ? _HOST_PASSWORD_PROD_ 	: _HOST_PASSWORD_DEV_;

			$proc 	= !$devmode ? _DELETE_PRODUCT_PROC_PROD_ : _DELETE_PRODUCT_PROC_DEV_;
	
			$conn = new PDO("mysql:host=$host;dbname=$dbname", $usr, $pwd);
			$conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
			
			$results = array();
			
			foreach($array as $data) {				
				// Execute the stored procedure
				$stmt = $conn->prepare(
					"CALL $proc(".
						 ":_sku".
					");"
				);
				$stmt->bindParam(':_sku', $data[$_DELETE_FIELD_MAPPING_["_sku"]], PDO::PARAM_STR,256); 
				$stmt->execute();
				$stmt->closeCursor();
				
				array_push($results, $data);
			}

			// Return input body as results to confirm success
			return 	$response->withStatus(200)
						->withHeader("Content-Type","application/json")
						->write(json_encode($results));
		
		} catch (PDOException $e) {
			return 	$response->withStatus(500)
							->withHeader("Content-Type","application/json")
							->write(json_encode(array(
						"ErrorCode"	=>	500,
						"Exception"	=>	$e->getMessage()
					)));
		}
    }
);

/**
 * Run the Slim application
 */
$app->run();
